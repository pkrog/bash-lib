#!/bin/bash

SCRIPT_FILE=$(basename $0)
SCRIPT_DIR=$(dirname $0)
source "$SCRIPT_DIR/all.sh"

function read_args {

	ap_add_debug_opt
	ap_add_dryrun_opt
	ap_add_help_opt
	ap_add_version_opt
	ap_add_opt_str 'p,pattern' PATTERN '^source .*\/%LIB%"?$'\
		"The pattern to use to match source lines."
	ap_add_opt_str "l,lib-dir" LIBDIR "$SCRIPT_DIR" "The directory where to"\
		"find the library files."
	ap_add_pos_one INPUT_FILE "The input script file in which to replace "\
		"each sourced library with its code."
	ap_add_pos_one OUTPUT_FILE "The file in which to write the resulting"\
		"script."
	ap_read_args "$@"
}

function embed_lib {

	local libpath="$1"
	local infile="$2"
	local outfile="$3"
	local libfile=$(basename "$libpath")

	local pattern=$(echo $PATTERN | sed "s/%LIB%/$libfile/")
	local awkcode="/$pattern/ { system(\"cat $libpath\") ; next } 1"
	if [[ -z $OS_DRYRUN ]] ; then
		awk "$awkcode" $infile >$outfile
	else
		echo "awk \"$awkcode\" $infile >$outfile"
	fi
}

function remove_lib {

	local libfile="$1"
	local infile="$2"
	local outfile="$3"

	local pattern=$(echo $PATTERN | sed "s/%LIB%/$libfile/")
	local awkcode="/$pattern/ { next } 1"
	if [[ -z $OS_DRYRUN ]] ; then
		awk "$awkcode" $infile >$outfile
	else
		echo "awk \"$awkcode\" $infile >$outfile"
	fi
}

function main {

	read_args "$@"

	local file="$INPUT_FILE"
	declare -a embedded_libs=()
	local same_file=
	while [[ -z $same_file ]] ; do

		same_file=1
		for libpath in "$LIBDIR"/*.sh ; do
			local outfile=$(mktemp -t $SCRIPT_FILE.XXXXXX)
			local libfile=$(basename "$libpath")

			lg_debug 1 "10 libpath=$libpath"
			lg_debug 1 "11 embedded_libs=${embedded_libs[@]}"
			# Already embedded
			if [[ " ${embedded_libs[@]} " == *" $libfile "* ]] ; then
				remove_lib "$libfile" "$file" "$outfile"

			# Embed if found
			else
				embed_lib "$libpath" "$file" "$outfile"
				diff -q "$file" "$outfile" >/dev/null || \
					embedded_libs+=($libfile)
			fi
			lg_debug 1 "20 embedded_libs=${embedded_libs[@]}"

			# Set new file
			if ! diff -q "$file" "$outfile" >/dev/null ; then
				lg_debug 1 "File \"$file\" has been modified. Now using"\
					"\"$outfile\"."
				file="$outfile"
				same_file=
			fi
		done
	done

	cp "$file" "$OUTPUT_FILE"

}

main "$@"
exit 0
